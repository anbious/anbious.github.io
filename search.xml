<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[XSS(二)]]></title>
    <url>%2F2019%2F10%2F11%2FXSS-%E4%BA%8C%2F</url>
    <content type="text"><![CDATA[我们今天接着上一次的说后20道题 L11首先还是把源码拉出来，又是几个隐藏的表单项，受上一题的启发，我们先手动补一个type=submit，name=my_submit的input标签，然后提交一下试试，这是结果： 这时我们发现有两处回显，经过测试，t_sort处的过滤实在是无法绕过（有可以绕过的大佬求求教我一哈~），当发现各种操作都无法绕过后，我开始将注意转向t_ref，这是啥？等等。。ref是不是referr的简写？burp抓包瞅一眼，发现referr传的就是这串东西，那我们能不能通过改这个来完成XSS注入？修改referr为：&quot;onmouseover=alert(/xss/),OK,搞定 L12还是先看看源代码，欸，发现个t_ua，而且其字段，哇，好熟悉，这不就是user-agent嘛？受上一题的启发，burp启动！抓包！改user-agent为&quot;onmouseover=alert(/xss/) OK，搞定，就不附图了，一样的 L13同样先看源码，woc，这次变成t_cook了？难道是cookie？再一看，都是call me maybe？，懂了吧都？直接burp抓包，改啥我就不用多说了 L14抱歉这题真的做不了，但是看大佬说，似乎想考EXIF XSS，既然没法做，这里就学一下啥叫EXIF XSS吧。以下是百度百科： 可交换图像文件格式（英语：Exchangeable image file format，官方简称Exif），是专门为数码相机的照片设定的，可以记录数码照片的属性信息和拍摄数据。 其实简单来说，也就是右键点开一个图片的属性时，里面加的制造厂商，相机型号，曝光时间，光圈值等等，有没有突然发现，这些数据是我们可以人为修改的？那有没有联想到一些刺激的事？ 其实EXIF XSS就是利用了这些可控的数据，在其中填入XSS的攻击向量，当服务器端去解析图片时，就会触发XSS的payload，这就是利用的原理，如果某些EXIF插件在解析图片时没有经过过滤，就会造成这种攻击，一个具体的攻击案例可以参考如下博客： https://www.hackersb.cn/hacker/140.html L15不得不说，这题真心做不出来，我都查到了ng-include是AngularJS的语法了，也知道它可以引入一个外部的文件进行解析，但是真的没查到在URL中的引入参数名为src。。。。就当是学习了，记下了。知道是src为引入外部html的参数名后，就简单了，我们通过引入level1的html就欧克了（由于策略问题，只能引入同源的html，也就是说只能引入同一域名下的html，所以引入level），构造payload为src=&#39;level1.php?name=&lt;img src=x onerror=alert(/xss/)&gt;&#39; 实现弹窗，这里顺便说一下，payload为src=&#39;level1.php?name=&lt;script&gt;alert(/xss/)&lt;/script&gt;&#39; 时并不会弹窗，这是为什么呢？我猜测是。。好像不大靠谱。。有木有大佬给我讲讲为啥啊。。。？好迷茫 哦对，这个题由于用的是Google的API，如果不翻墙可能加载不出来，这也是比较坑的地方。。做的时候注意一下，我刚开始就是连api都没请求到。。。。附一下成功后的代码： L16上来稍微测试下，发现跟前面某一题好像欸，又是把script替换成空了。。但是仔细看，其实不是替换成空了，而是替换成&amp;nbsp; 了，这一点双写一下script就可以发现。 那么，现在script是用不了了，尝试一下img标签吧，构造：&lt;img src=x onerror=alert(1)&gt; 发现空格被html实体编码了。。 擦，这就挡得住我们嘛？当然不，不就是要空开嘛？我们可以尝试用%0a或%0d来绕过，尝试构造&lt;img%0asrc=x%0aonerror=alert(1)&gt; OK，绕过了~ L17和L18一块说了，没发现啥区别，先说，这道题需要装flash了。。要不然火狐就做不了。。。刚开始我电脑没装adobe flash，直接就不加载 。。我醉了。。。 有flash拓展后，发现有两个参数我们可以控制且会被拼接，我们先试试直接来加事件可不可以。构造arg01=a&amp;arg02=b onmouseover=alert(1) , woc直接成了。。。而且两题都是这样。。没发现有啥区别。。。 L19和L20这两题也放在一块说，考的都是flash的语法。。对不起打扰了，我真的不会。。。这里说一下大佬的wp吧： 19的payload为：arg01=version&amp;arg02=&lt;a href=&quot;javascript:alert(document.domain)&quot;&gt;xss&lt;/a&gt; 传递一个version参数，这时再去加载flash时就会出现一个链接，点击后弹窗。。如图： L20就更玄幻了。。 paylaod=arg01=id&amp;arg02=\%22))}catch(e){}if(!self.a)self.a=!alert(document.cookie))//%26width%26height 对不起打扰了，我是弟弟。。关于flash语法，以后有时间可以写一下，完善一下自己的知识，似乎flash爆出的漏洞还不少。。确实应该学一学。 好了，今天就到这里了，明天见嘿嘿~]]></content>
      <categories>
        <category>安全</category>
      </categories>
      <tags>
        <tag>XSS</tag>
        <tag>WEB</tag>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[搭建博客]]></title>
    <url>%2F2019%2F10%2F07%2F%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[本文记录了利用Github pages + hexo + nexT建站的经过，偶有踩坑。。且没有解决。。以后还是要再多试试。不过从0到1建站还是很有成就感的，记录一哈~ 第一步：本地前提准备 首先推荐官方文档，懒人可参考一下步骤 下载nodejs，Windows用户官网下载，LTS版本，然后安装，默认会配置路径，别忘了重启一下终端，再不行就重启电脑=。= 选择一个自己心仪的博客框架，推荐HEXO，或者是JeKyll， 这两者都是用于生成伪静态页面的两个博客框架，这个博客是使用HEXO搭建的，接下来也是介绍HEXO的建站过程，如果想找JsKyll的框架，可以阅读大佬的博客https://faner.gitlab.io/blog/2017/07/07/jekyll%E5%AE%89%E8%A3%85%E4%B8%8E%E9%83%A8%E7%BD%B2/ 安装HEXO的命令：npm install -g hexo-cli 这一步可能会有warn，但是没事，只要没有error就不影响正常使用，如果发现npm无法请求到东西，可以尝试使用cnpm替换为国内源 接着输入：npm install hexo --save 安装完成后检查一下：hexo -v，如果输出正常，hexo就没问题了 这时在本地新建一个空白文件夹，加入命名为blog，作为你的博客的一个容器，博客相关的东西都会在这里，接着进入这个目录，输入：hexo init 完成hexo的初始化 接着输入hexo clean &amp;&amp; hexo d &amp;&amp; hexo s 把项目启动 点开 http://localhost:4000/ ，恭喜你！已经在本地搭建好博客了 (๑•̀ㅂ•́)و✧！距离成功只差下一步——部署博客到 GitHub Pages 了～ 哦对了，还有一个东西，那就是Git，也要本地安装，有两种方式，一种是下载github客户端Github desktop，或者就是git的安装：可以从Git官网直接下载安装程序 第二步：Github配置这里引一下大佬的博客：https://segmentfault.com/a/1190000017986794 首先如果你还没有 Github 账号的先注册一个，具体过程如下 点击 Start project 或者下面的 new repository 创建一个新的仓库 注意点来了，Github 仅能使用一个同名仓库的代码托管一个静态站点，这个网上很多教程没说到的。 然后github的配置就基本完成了，这时其实已经可以开始干大事了，但是为了方便还是建议阅读一下的配置ssh key的步骤 配置 SSH key要使用 git 工具首先要配置一下SSH key，为部署本地博客到 Github 做准备。 打开命令行输入 cd ~/.ssh 如果没报错或者提示什么的说明就是以前生成过的，直接使用 cat ~/.ssh/id_rsa.pub 命令就是可以查看本机上的 SSH key 了。 1cat ~/.ssh/id_rsa.pub 如果之前没有创建，则执行以下命令全局配置一下本地账户： 12git config --global user.name &quot;用户名&quot;git config --global user.email &quot;邮箱地址&quot; 然后开始生成密钥 SSH key 1ssh-keygen -t rsa -C &apos;上面的邮箱&apos; 按照提示完成三次回车，即可生成 ssh key。通过查看 ~/.ssh/id_rsa.pub 文件内容，获取到你的 SSH key （此图引用自码云） 首次使用还需要确认并添加主机到本机SSH可信列表。若返回 Hi xxx! You’ve successfully authenticated, but GitHub does not provide shell access. 内容，则证明添加成功。 1ssh -T git@github.com 到这还没完，还要登录 Github 上添加刚刚生成的SSH key，按以下步骤添加： 创建一个新的 SSH key, 标题随便，key 就填刚才生成那个，确认创建，搞定！！这样在你的 SSH keys 列表里就会看到你刚刚添加的密钥。 解释一下，这里添加ssh key主要是为了让每次更新博客时不用都输账号密码，如果不添加key的话，github会拒绝我们的SSH链接请求 第三步：第一篇博客博客搭好了，就开始写文章了，这里简单介绍一下，详细的文档可以看 hexo 官网。新建文章，输入以下命令即可 1hexo new &apos;文章标题&apos; 执行完成后可以在 /source/_posts 下看到一个“文章标题.md”的文章文件啦。.md 就是 Markdown 格式的文件，具体用法可以在网上找一下，语法还是比较简单的。 在 Markdown 文章里面输入你的文章内容 如图中见到的，直接使用MK语法就可以编写了。写完后直接hexo d就完成了更新，快试试吧~ 第四步：博客美化大神们的美化做的很到位了，这里推荐几篇~我就先溜了 http://eternalzttz.com/hexo-next.html https://io-oi.me/tech/hexo-next-optimization/ 再或者想实现什么功能，google是最好的选择~ 断断续续弄博客弄了好多天了，虽然挺有成就感的而且学到了很多知识，但是也确实有些疲倦了，更想学习一些安全方面的知识。先这样吧，以后再慢慢的优化。]]></content>
      <categories>
        <category>杂项</category>
      </categories>
      <tags>
        <tag>杂项</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[XSS进阶(一)]]></title>
    <url>%2F2019%2F10%2F07%2FXSS-%E4%B8%80%2F</url>
    <content type="text"><![CDATA[XSS进阶（一）直接接着上文http://xss.fbisb.com 中的题，以下的题请使用FireFox进行测试，chrome会默认禁止执行url中的script代码，导致无法弹窗 L2先尝试搜索 1&lt;script&gt;alert(/xss/)&lt;/script&gt; 然后审查元素： 有两处出现了回显，但是观察第一行，我们的代码直接原封不动的回显出来，估计八成就是HTML实体编码了，这个没办法，没法绕过。那么下面那条语句会不会是一个突破口呢？ 尝试构造：&quot;&gt;&lt;script&gt;alert(/xss/)&lt;/script&gt; 成功闭合前面的标签，完成突破，弹窗完毕 L3还是先尝试搜索： 1&lt;script&gt;alert(/xss/)&lt;/script&gt; ，然后审查元素 和上图是一样的，于是尝试&#39;&gt;&lt;script&gt;alert(/xss/)&lt;/script&gt; ，只不过这次是用单引号闭合的 发现&lt;,&gt;,’ 都被转义了，那么这个时候就想，既然闭合不了，那么能不能通过给标签新加一个属性，来达到运行JavaScript的目的呢？ 尝试:&#39;onfocus=&#39;alert(/xss/)&#39; 当点击文本框时实现弹窗（觉得实现效果不好的话可以尝试添加其他的事件属性） L4还是先尝试搜索：&quot;&gt;&lt;script&gt;alert(/xss/)&lt;/script&gt; ，然后审查元素， 发现尖括号被过滤了，那尝试上面的思路如何呢？构造&#39;onfocus=&#39;alert(/xss/)&#39; 发现应该把单引号换成双引号去闭合，即：&quot;onfocus=&#39;alert(/xss/)&#39;完成弹窗 L5尝试搜索：&quot;&gt;&lt;script&gt;alert(/xss/)&lt;/script&gt; ，然后审查元素: 发现在尖括号中的script会被替换成scr_ipt，导致&lt;script&gt;标签无法被正常的识别，同时on也会被替换成o_n,这时候有两个方向，一种是尝试大小写script绕过检测，第二种是利用标签属性，避开使用script，同时也不能使用on事件。 这里经过尝试，大小写无法绕过，那只能是第二种思路了：考虑现在我们还可以利用什么呢？也就是href和src的javascript协议了； 构造&quot;&gt;&lt;a href=&quot;javascript:alert(/xss/)&quot;&gt;,然后点击我们自己构造的a标签，实现弹窗，这里可能会有人不解，href不是应该加一个URL嘛，为什么可以执行JavaScript，其实这里确实是一个URL，浏览器将href等于的字符串当作URL处理，然后读到了JavaScript:这个js的伪协议，于是调用js引擎解析后面的代码，实现了js 的执行 L6搜索：&quot;&gt;&lt;script&gt;alert(/xss/)&lt;/script&gt; ，然后审查元素,仍然是上图那样，script会被替换，那试试刚刚得payload：&quot;&gt;&lt;a href=&quot;javascript:alert(/xss/)&quot;&gt; ： 发现确实可以闭合，但是href被替换为hr_ef了，那用src呢？打扰了。。src也会被替换，那么on呢？同样被替换，那么我们回归比较上一题得第一种思路可以解决问题嘛？尝试一下： &quot;&gt;&lt;scRIpT&gt;alert(/xss/)&lt;/scRIpt&gt; OK,OVER！ L7先尝试一下上一关得payload&quot;&gt;&lt;scRIpT&gt;alert(/xss/)&lt;/scRIpt&gt; 发现script被替换了，欸，能不能双写绕过？构造&#39;&quot;&gt;&lt;scriscriptpt&gt;alert(/xss/)&lt;/scriscriptpt&gt; 原理是什么呢？当一个script被替换为空时，外层得script又被组合出来了，形成payload，完成弹窗，OK L8题目形式发生了变化，变成了添加友链，观察一下代码： 那我们能不能直接：javascript:alert(/xss/) , 结果不行，发现script被替换，但是仔细看，这里是在标签内，我们其实可以尝试使用HTML Encode绕过，尝试一下： 1&amp;#x6a;&amp;#x61;&amp;#x76;&amp;#x61;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;&amp;#x3a;&amp;#x61;&amp;#x6c;&amp;#x65;&amp;#x72;&amp;#x74;&amp;#x28;&amp;#x2f;&amp;#x78;&amp;#x73;&amp;#x73;&amp;#x2f;&amp;#x29; 这个其实就是javascript:alert(/xss/)得HTML实体编码，由于是在HTML标签中，这些标签会被正常得解析成HTML，但是在后端看来并没有script需要被替换，于是将内容原封不动得返回到前端交由浏览器渲染。 ok，payload有效，完成弹窗 L9先尝试一下javascript:alert(/xss/) 提示链接不合法，那我们考虑一下，什么样的链接是合法的呢？通过不断尝试，发现后端会判断有没有”http://“这个字符串出现，如果出现，其他都不检测，就认为是合法链接，将用户输入拼接进a标签中 那这时候，我们灵光一显，我构造javascript:alert(http://) (记得除了http://外，要HTML encode一下绕过替换)，OK，实现弹窗 L10直接啥都没了？没有输入的地方？这我怎么办嘛？别着急，审查一下元素： 发现猫腻，输入框被隐藏了，那我们只需要把hidden属性去掉，文本框就会显现出来，但是注意这里是没有submit按钮，也就是无法提交我们的表单，那这时候怎么办？—-当然是自己加一个标签啊！ 测试一下那个字段会回显：发现t_sort会将我们提交的数据拼接起来，ok，开始构造XSS： &quot;&gt;onfocus=&quot;alert(/xss/)&quot; 聚焦时实现弹窗 OK，今天就先到这里吧，明天接着写后10道题]]></content>
      <categories>
        <category>安全</category>
      </categories>
      <tags>
        <tag>XSS</tag>
        <tag>WEB</tag>
        <tag>CTF</tag>
      </tags>
  </entry>
</search>
